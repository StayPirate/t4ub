#!/bin/sh -
# virt-what.  Generated from virt-what.in by configure.
# Copyright (C) 2008-2011 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# 'virt-what' tries to detect the type of virtualization being
# used (or none at all if we're running on bare-metal).  It prints
# out one or more lines each being a 'fact' about the virtualization.
#
# Please see also the manual page virt-what(1).
# This script should be run as root.
#
# The following resources were useful in writing this script:
# . http://dmo.ca/blog/detecting-virtualization-on-linux/

# Do not allow unset variables, and set defaults.
set -u
root=''
skip_qemu_kvm=false
skip_lkvm=false

VERSION="1.15"

have_cpuinfo () {
    test -e "${root}/proc/cpuinfo"
}

fail () {
    echo "virt-what: $1" >&2
    exit 1
}

usage () {
    echo "virt-what [options]"
    echo "Options:"
    echo "  --help          Display this help"
    echo "  --version       Display version and exit"
    exit 0
}

# Handle the command line arguments, if any.
while test $# -gt 0; do
    case "$1" in
	--help) usage ;;
        --test-root=*)
            # Deliberately undocumented: used for 'make check'.
            root=$(echo "$1" | sed 's/.*=//')
            shift 1
            test -z "$root" && fail "--test-root option requires a value"
            ;;
	-v|--version) echo "$VERSION"; exit 0 ;;
	--) shift; break ;;
	*) fail "unrecognized option '$1'";;
    esac
done
test $# -gt 0 && fail "extra operand '$1'"

# Add /sbin and /usr/sbin to the path so we can find system
# binaries like dmidecode.
# Add /usr/libexec to the path so we can find the helper binary.
prefix=/usr/local
exec_prefix=${prefix}
PATH=".:${PATH}"

# Check we're running as root.
#EFFUID=$(id -u) || fail "failed to get current user id"
#
#if [ "x$root" = "x" ] && [ "$EFFUID" -ne 0 ]; then
#    fail "this script must be run as root"
#fi

# Try to locate the CPU-ID helper program
#CPUID_HELPER=$(which virt-what-cpuid-helper 2>/dev/null)
#if [ -z "$CPUID_HELPER" ] ; then
#    fail "virt-what-cpuid-helper program not found in \$PATH"
#fi

# Many fullvirt hypervisors give an indication through CPUID.  Use the
# helper program to get this information.

cpuid=$(virt-what-cpuid-helper)

# Check for various products in the BIOS information.
# Note that dmidecode doesn't exist on non-PC architectures.  On these,
# this will return an error which is ignored (error message redirected
# into $dmi variable).

dmi=$(LANG=C dmidecode 2>&1)

# Architecture.
# Note for the purpose of testing, we only call uname with -p option.

arch=$(uname -p | sed -e 's/i.86/i386/' | sed -e 's/arm.*/arm/')

# Check for VMware.
# cpuid check added by Chetan Loke.

if [ "$cpuid" = "VMwareVMware" ]; then
    echo vmware
elif echo "$dmi" | grep -q 'Manufacturer: VMware'; then
    echo vmware
fi

# Check for Hyper-V.
# http://blogs.msdn.com/b/sqlosteam/archive/2010/10/30/is-this-real-the-metaphysics-of-hardware-virtualization.aspx
if [ "$cpuid" = "Microsoft Hv" ]; then
    echo hyperv
fi

# Check for VirtualPC.
# The negative check for cpuid is to distinguish this from Hyper-V
# which also has the same manufacturer string in the SM-BIOS data.
if [ "$cpuid" != "Microsoft Hv" ] &&
    echo "$dmi" | grep -q 'Manufacturer: Microsoft Corporation'; then
    echo virtualpc
fi

# Check for VirtualBox.
# Added by Laurent Léonard.
if echo "$dmi" | grep -q 'Manufacturer: innotek GmbH'; then
    echo virtualbox
fi

# Check for OpenVZ / Virtuozzo.
# Added by Evgeniy Sokolov.
# /proc/vz - always exists if OpenVZ kernel is running (inside and outside
# container)
# /proc/bc - exists on node, but not inside container.

if [ -d "${root}/proc/vz" -a ! -d "${root}/proc/bc" ]; then
    echo openvz
fi

# Check for LXC containers
# http://www.freedesktop.org/wiki/Software/systemd/ContainerInterface
# Added by Marc Fournier

if [ -e "${root}/proc/1/environ" ] &&
    cat "${root}/proc/1/environ" | tr '\000' '\n' | grep -Eiq '^container='; then
    echo lxc
fi

# Check for Linux-VServer
if test -e "${root}/proc/self/status" \
   && cat "${root}/proc/self/status" | grep -q "VxID: [0-9]*"; then
    echo linux_vserver
    if grep -q "VxID: 0$" "${root}/proc/self/status"; then
        echo linux_vserver-host
    else
        echo linux_vserver-guest
    fi
fi

# Check for UML.
# Added by Laurent Léonard.
if have_cpuinfo && grep -q 'UML' "${root}/proc/cpuinfo"; then
    echo uml
fi

# Check for IBM PowerVM Lx86 Linux/x86 emulator.
if have_cpuinfo && grep -q '^vendor_id.*PowerVM Lx86' "${root}/proc/cpuinfo"
then
    echo powervm_lx86
fi

# Check for Hitachi Virtualization Manager (HVM) Virtage logical partitioning.
if echo "$dmi" | grep -q 'Manufacturer.*HITACHI' &&
   echo "$dmi" | grep -q 'Product.* LPAR'; then
    echo virtage
fi

# Check for IBM SystemZ.
if have_cpuinfo && grep -q '^vendor_id.*IBM/S390' "${root}/proc/cpuinfo"; then
    echo ibm_systemz
    if [ -f "${root}/proc/sysinfo" ]; then
        if grep -q 'VM.*Control Program.*z/VM' "${root}/proc/sysinfo"; then
            echo ibm_systemz-zvm
        elif grep -q '^LPAR' "${root}/proc/sysinfo"; then
            echo ibm_systemz-lpar
        else
            # This is unlikely to be correct.
            echo ibm_systemz-direct
        fi
    fi
fi

# Check for Parallels.
if echo "$dmi" | grep -q 'Vendor: Parallels'; then
    echo parallels
    skip_qemu_kvm=true
fi

# Check for Xen.

if [ "$cpuid" = "XenVMMXenVMM" ]; then
    echo xen; echo xen-hvm
    skip_qemu_kvm=true
elif [ -d "${root}/proc/xen" ]; then
    echo xen
    if grep -q "control_d" "${root}/proc/xen/capabilities" 2>/dev/null; then
        echo xen-dom0
    else
        echo xen-domU
    fi
    skip_qemu_kvm=true
    skip_lkvm=true
elif [ -f "${root}/sys/hypervisor/type" ] &&
    grep -q "xen" "${root}/sys/hypervisor/type"; then
    # Ordinary kernel with pv_ops.  There does not seem to be
    # enough information at present to tell whether this is dom0
    # or domU.  XXX
    echo xen
elif [ "$arch" = "arm" ] || [ "$arch" = "aarch64" ]; then
    if [ -d "${root}/proc/device-tree/hypervisor" ] &&
        grep -q "xen" "${root}/proc/device-tree/hypervisor/compatible"; then
        echo xen
        skip_qemu_kvm=true
        skip_lkvm=true
    fi
elif [ "$arch" = "ia64" ]; then
    if [ -d "${root}/sys/bus/xen" -a ! -d "${root}/sys/bus/xen-backend" ]; then
        # PV-on-HVM drivers installed in a Xen guest.
        echo xen
        echo xen-hvm
    else
        # There is no virt leaf on IA64 HVM.  This is a last-ditch
        # attempt to detect something is virtualized by using a
        # timing attack.
        virt-what-ia64-xen-rdtsc-test > /dev/null 2>&1
        case "$?" in
            0) ;; # not virtual
            1) # Could be some sort of virt, or could just be a bit slow.
                echo virt
        esac
    fi
fi

# Check for QEMU/KVM.
#
# Parallels exports KVMKVMKVM leaf, so skip this test if we've already
# seen that it's Parallels.  Xen uses QEMU as the device model, so
# skip this test if we know it is Xen.

if ! "$skip_qemu_kvm"; then
    if [ "$cpuid" = "KVMKVMKVM" ]; then
	echo kvm
    elif [ "$arch" = "arm" ] || [ "$arch" = "aarch64" ]; then
        if [ -d "${root}/proc/device-tree" ] &&
            ls "${root}/proc/device-tree" | grep -q "fw-cfg"; then
            # We don't have enough information to determine if we're
            # using KVM acceleration or not.
            echo qemu
            skip_lkvm=true
        fi
    else
        # XXX This is known to fail for qemu with the explicit -cpu
        # option, since /proc/cpuinfo will not contain the QEMU
        # string.  The long term fix for this would be to export
        # another CPUID leaf for non-accelerated qemu.
        if grep -q 'QEMU' "${root}/proc/cpuinfo"; then
	    echo qemu
	fi
    fi
fi

if ! "$skip_lkvm"; then
    if [ "$cpuid" = "LKVMLKVMLKVM" ]; then
        echo lkvm
    elif [ "$arch" = "arm" ] || [ "$arch" = "aarch64" ]; then
        if [ -d "${root}/proc/device-tree" ] &&
            grep -q "dummy-virt" "${root}/proc/device-tree/compatible"; then
            echo lkvm
	fi
    fi
fi

# Check for Docker.
if [ -f "${root}/.dockerinit" ]; then
	echo docker
fi
